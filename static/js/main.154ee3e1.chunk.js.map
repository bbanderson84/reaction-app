{"version":3,"sources":["components/Header/Header.js","components/ImageCard/ImageCard.js","components/Navbar/Navbar.js","components/Footer/Footer.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","id","ImageCard","alt","src","image","onClick","isClicked","Navbar","userScore","topScore","Footer","Wrapper","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickedImage","state","images","filter","imageCopy","slice","sort","Math","random","clicked","resetImage","map","setState","card","findIndex","bind","assertThisInitialized","_this2","components_Navbar_Navbar","components_Header_Header","components_Wrapper_Wrapper","components_ImageCard_ImageCard","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.154ee3e1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = props => (\r\n   \r\n \r\n   <div className=\"main-container\">\r\n\r\n        <div className=\"jumbotron text-muted\" id=\"jumbo\">\r\n            <h1 className=\"title\">Animal Memory Card Game</h1>\r\n            <p className=\"lead\">This app tests short term memory. Click the pictures to increase the score, but if the user clicks a picture more than once, the score resets. To start the game over, click on a picture that has not been clicked yet. </p>\r\n        </div>\r\n    </div>\r\n\r\n    )\r\n\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst ImageCard = props => (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img className =\"img\" \r\n        alt={props.id} \r\n        src={props.image} \r\n        onClick={() => props.isClicked(props.id)}\r\n      />\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\nexport default ImageCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Navbar = props => (\r\n<div className=\"navybar\">\r\n    <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n    <span className=\"navbar-brand mb-0 h1\">MEMORY GAME</span>\r\n    <span className=\"navbar-text\">\r\n     <h5 className=\"text-muted\"> Score: {props.userScore} || Top Score: {props.topScore} </h5>\r\n    </span>\r\n   \r\n    </nav>\r\n</div>\r\n)\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Footer = props => (\r\n     <div className=\"footer\">\r\n              <p className=\"text-muted text-center\">Version 1.0. </p>\r\n          </div>\r\n  \r\n      )\r\n\r\n  export default Footer;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Wrapper = props => (\r\n  <div className=\"container wrapper\">{props.children}</div>\r\n)\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport Header from \"./components/Header/Header\";\nimport ImageCard from \"./components/ImageCard/ImageCard\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Footer from \"./components/Footer/Footer\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport images from \"./images.json\";\n\n// component - constructor built from images, score starts at 0\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props)\n\n    this.state = {\n\n      images: images,\n\n      topScore: 0, \n\n      userScore: 0,\n  };\n  this.isClicked = this.isClicked.bind(this);\n}\n\n// checking to see if image has been clicked \nisClicked = (id) => {\n  //creates copy of images\n  let clickedImage = this.state.images.filter(images => images.id === id)[0];\n\n  let imageCopy = this.state.images.slice();\n  //use random method to sort array\n  imageCopy.sort(function() {\n\n    return 0.5 - Math.random();\n\n  });\n  // setting logic for click function\n  if (!clickedImage.clicked) {\n\n    clickedImage.clicked = true;\n\n    imageCopy[imageCopy.findIndex((image) => image.id === id)] = clickedImage;\n    // sets the state of user scores and top score if image is clicked\n    this.setState({\n\n      images: imageCopy,\n\n      userScore: this.state.userScore + 1,\n\n      topScore: (this.state.userScore + 1 > this.state.topScore ? this.state.userScore +1 : this.state.topScore),\n\n    });\n\n  } else {\n    // \n    let resetImage = imageCopy.map((image) => {\n      return {\n        id: image.id,\n        image: image.image,\n        clicked: false,\n      }\n    });\n    // sets state to reset the image array and to user score as 0\n    this.setState({\n      card: resetImage,\n      userScore: 0,\n    });\n\n    }\n  };\n\n// rendering \nrender() {\n  return (\n  <div id=\"parent\">\n    <div id=\"parent\">\n      <div className=\"navybar\">\n        <Navbar userScore = {this.state.userScore} topScore = {this.state.topScore} />\n      </div>\n       <div className=\"container\">\n        <Header />\n      </div>\n    </div>\n\n    <div id=\"parent\">\n        <div id=\"container\">\n          <Wrapper>\n              {this.state.images.map(image => (\n              <ImageCard\n                isClicked={this.isClicked}\n                id={image.id}\n                image={image.image}\n                />\n                ))}\n          </Wrapper>\n      </div>\n      <div id=\"container\">\n        <Footer />\n      </div>\n    </div>\n  </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}